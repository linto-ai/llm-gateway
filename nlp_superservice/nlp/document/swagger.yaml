openapi: 3.0.1
info:
  title: nlp
  description: LinTO NLP services
  version: 1.2.1

servers:
- url: /

security:
  - bearerAuth: []

paths:
  /list-services:
    get:
      tags:
      - Service Listing API
      summary: List Available sub-services
      responses:
        200:
          description: "List of available sub-services"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subserviceList'
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."

  /nlp:
    post:
      tags:
      - TBR TAG
      summary: LinTO NLP services
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                config:
                  type: object
      responses:
        200:
          description: "Job successfully finished (force_sync)"
        201:
          description: Successfully created job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobID'
        400:
          description: "Bad request"
          content:
            text/plain:
              schema:
                type: string
                default: "Bad header / Bad parameters / No file attached"
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."
        
  /job/{jobid}:
    get:
      tags:
        - Job status
      parameters:
        - name: "jobid"
          in: path
          required: true
          description: Job request ID
          schema:
            type: string

      responses:
        201:
          description: "Job successfully finished. Returns a result ID"
        
        202:
          description: Task is still processing. Return job progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobInProgress'
        400:
          description: Task has failed
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/jobFailed'


        404:
          description: JobId hasn't been found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/jobUnknown'
  
  /results/{result_id}:
    get:
      tags:
        - Job result
      parameters:
        - name: result_id
          in: path
          required: true
          description: Result id
          schema:
            type: string

      responses:
        200:
          description: Ressource available
          content:
            application/json:
            text/plain:
              schema:
                type: string
                default: This is a result
        404:
          description: No ressource found for this id

  /job-log/{jobid}:
    get:
      tags:
      - Debug
      summary: Display task logs.
      parameters:
        - name: jobid
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      responses:
        200:
          description: "Logs for the specified taskid"
          content:
            text/plain:
              schema:
                type: string
                default: "Task logs."
        404:
          description: "No logs found for specified taskid"
          content:
            text/plain:
              schema:
                type: string
                default: "No logs found for task X"
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    subserviceList:
      type: object
      properties:
        serviceType:
          type: object
          default: "punctuation|diarization|..."
          properties:
            service_name: 
              type: string
            service_type:
              type: string
              default: "TBR-Exemple of subservice"
            service_langugage:
              type: string
              default: "fr-fr|en-us|*|?|..."
            queue_name:
              type: string
              default: "service_queue"
            description:
              type: string
              default: "Service short description"
            instances:
              type: array
              default: "Service short description"
              items:
                $ref: '#/components/schemas/service_instance'
      
    service_instance:
      type: object
      properties:
        host_name: 
          type: string
        last_alive:
          type: integer
          default: 1
        version:
          type: string
          default: "Service image versions"
        concurrency:
          type: integer
          default: 1
            
    
    jobID:
      type: object
      properties:
        jobid:
          type: string
    jobInProgress:
      type: object
      properties:
        state:
          type: string
          enum: [started, pending]
        steps:
          type: object
    jobFinished:
      type: object
      properties:
        state:
          type: string
          default: finished
        ressource_id:
          type: string
          default: "ressource_id to use on the /results/{ressource_id} route"
    jobUnknown:
      type: object
      properties:
        state:
          type: string
          default: "unknown"
    jobFailed:
      type: object
      properties:
        state:
          type: string
          default: "failed"
        reason:
          type: string
          default: "The server encountered an error"
